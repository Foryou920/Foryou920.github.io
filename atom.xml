<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Foryou920</title>
  
  <subtitle>Hexo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-11T09:30:50.726Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YuJian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过Vue源代码解析$on、$emit实现原理</title>
    <link href="http://yoursite.com/2020/05/11/%E9%80%9A%E8%BF%87Vue%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90$on%E3%80%81$emit%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/11/%E9%80%9A%E8%BF%87Vue%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90$on%E3%80%81$emit%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2020-05-11T08:19:37.946Z</published>
    <updated>2020-05-11T09:30:50.726Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Vue_on&amp;emit.png&quot; alt=&quot;More OOXX With Vue&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;阅读Vue的源码对深入学习Vue框架是非常有必要的，只知道它表面的用法，而不知道它内部的原理那就说不上是真正熟悉掌握了这一门框架，常常出了问题一头雾水&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue的$emit、$on和Node.js的EventEmitter的使用方法非常类似。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;正式开始&quot;&gt;&lt;a href=&quot;#正式开始&quot; class=&quot;headerlink&quot; title=&quot;正式开始&quot;&gt;&lt;/a&gt;正式开始&lt;/h2&gt;&lt;h4 id=&quot;on绑定事件&quot;&gt;&lt;a href=&quot;#on绑定事件&quot; class=&quot;headerlink&quot; title=&quot;$on绑定事件&quot;&gt;&lt;/a&gt;$on绑定事件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Vue中的$on是一种将函数与事件绑定的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过Vue的源代码可以看到，$on调用时需要两个参数，第一个是字符串或数组类型作为事件的名称，第二个是触发事件执行的回调函数。$on第一步会对第一个参数做一个是否为数组的判断，这里可以看出$on允许为多个事件绑定同一个回调函数。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>纯JS实现下拉加载</title>
    <link href="http://yoursite.com/2020/04/14/%E7%BA%AFJS%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2020/04/14/%E7%BA%AFJS%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD/</id>
    <published>2020-04-14T15:15:13.566Z</published>
    <updated>2020-04-20T13:30:58.113Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/LoadingImg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近在深入学习Vue框架，想试着模仿&lt;a href=&quot;https://www.app-echo.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;echo回声&quot;&gt;echo回声&lt;/a&gt;的移动端网页写一个网页出来，参考了uncleLian大佬的&lt;a href=&quot;https://github.com/uncleLian/vue2-echo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;uncleLian/vue2-echo&quot;&gt;vue2-echo&lt;/a&gt;的一些实现。在这之中遇到了一个问题：uncleLian大佬使用Mint UI组件库来实现页面的下拉加载更多功能，但是我的项目并没有使用Mint UI，所以自然这个功能我就没法直接使用，没有就没有吧，大不了自己动手写，于是就有了这么一篇文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;p&gt;实现的思路很简单，就是判断 滚动高度 + 可视高度 是否大于文档高度&lt;/p&gt;
&lt;p&gt;window.pageYOffset + window.innerHeight &amp;gt;= document.documentElement.scrollHeight&lt;/p&gt;
&lt;p&gt;如果判断结果为真，就向后端请求更多数据，再使用push方法添加新请求返回的数据&lt;/p&gt;
&lt;h2 id=&quot;实现过程&quot;&gt;&lt;a href=&quot;#实现过程&quot; class=&quot;headerlink&quot; title=&quot;实现过程&quot;&gt;&lt;/a&gt;实现过程&lt;/h2&gt;&lt;p&gt;实现每次下拉都返回不同的数据，就要对内容进行分页，根据页数返回不同的数据，但是这个项目并没有后端，后端返回的数据用的是Mock.js模拟的，问题来了Mock.mock在拦截GET请求的时候是无法拦截到url后面带的参数，这样一来就没法在Mock.js对传入的参数进行判断,这时候有两种解决思路，一种是数据分6页就写6个Mock.mock分别拦截不同的页数，使用这种方法的代码会很冗余，还有一种是uncleLian大佬的实现方法：使用for循环让Mock.mock拦截不同的页数&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>零基础教你用WordPress搭建个人网站</title>
    <link href="http://yoursite.com/2020/03/08/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E4%BD%A0%E7%94%A8WordPress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2020/03/08/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E4%BD%A0%E7%94%A8WordPress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</id>
    <published>2020-03-08T15:30:39.326Z</published>
    <updated>2020-04-12T07:29:50.149Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/welcome-to-wp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;网上关于使用WordPress搭建个人网站的教程有很多，我的水平也没有那些真正的dalao高，写这一篇主要是为了帮还不会建站的朋友们入门门槛低一些&lt;br&gt;顺带复习一下语文&lt;br&gt;你可以问我问题，但没准你知道的比我还多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正文部分&quot;&gt;&lt;a href=&quot;#正文部分&quot; class=&quot;headerlink&quot; title=&quot;正文部分&quot;&gt;&lt;/a&gt;正文部分&lt;/h2&gt;&lt;p&gt;###第一步，注册一个域名&lt;br&gt;国内比较出名的有万网，腾讯云。国外比较出名的有GoDaddy，选好合适的然后付钱就可以了( • ̀ω•́ )✧&lt;/p&gt;
&lt;h3 id=&quot;第二步，购买一台云服务器&quot;&gt;&lt;a href=&quot;#第二步，购买一台云服务器&quot; class=&quot;headerlink&quot; title=&quot;第二步，购买一台云服务器&quot;&gt;&lt;/a&gt;第二步，购买一台云服务器&lt;/h3&gt;&lt;h5 id=&quot;这一步要注意，国内主机用于网站搭建需要备案&quot;&gt;&lt;a href=&quot;#这一步要注意，国内主机用于网站搭建需要备案&quot; class=&quot;headerlink&quot; title=&quot;这一步要注意，国内主机用于网站搭建需要备案&quot;&gt;&lt;/a&gt;这一步要注意，国内主机用于网站搭建需要备案&lt;/h5&gt;&lt;p&gt;国内可以选择阿里云，腾讯云之类的比较出名的服务商&lt;br&gt;国外的涉及部分原因不予说明，请自行百度(￣ ￣)／&lt;/p&gt;
&lt;p&gt;腾讯云有学生优惠套餐，最低只需要10元一个月，但只有国内主机可选&lt;br&gt;&lt;img src=&quot;/images/Tenxunyun.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;阿里云学生认证之后也有学生优惠套餐，9.5一个月，年费还送.xin域名，只有国内主机可选&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Yan Ruyu_Vue学习笔记</title>
    <link href="http://yoursite.com/2020/03/08/Yan%20Ruyu_Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/08/Yan%20Ruyu_Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-08T11:51:46.232Z</published>
    <updated>2020-05-12T13:55:45.639Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/welcome-to-vue.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Vue基本认知&quot;&gt;&lt;a href=&quot;#Vue基本认知&quot; class=&quot;headerlink&quot; title=&quot;Vue基本认知&quot;&gt;&lt;/a&gt;Vue基本认知&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Vue是一个JavaScript框架，它的特点在于使用者不用再思考DOM的操作，一切都由Vue来承担，这就是Vue的MVVM模式，使用Vue框架你只需要操作数据而不是DOM。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue的v-for: 是Vue中一个简单的for循环，目前学到的课程中它可以用来遍历数组。&lt;br&gt;Vue的v-on: 是Vue中用于绑定事件的指令，它的作用是绑定一个事件，它可以简写成@。&lt;br&gt;Vue的v-bind: 用于传递数据，它可以帮你在组件之中传递值。&lt;br&gt;Vue的v-model: 数据的双向绑定。&lt;/p&gt;
&lt;p&gt;Vue的el: 是Vue实例的“管辖范围”，它用于确定Vue实例的生效区域。&lt;br&gt;Vue的data: 是Vue实例的数据区域，它一般用于放置Vue实例中的数据内容。&lt;br&gt;Vue的methods: 用于放置Vue实例的方法，任何Vue中的使用的函数方法都要在其中定义。&lt;/p&gt;
&lt;h3 id=&quot;Vue-的深入理解&quot;&gt;&lt;a href=&quot;#Vue-的深入理解&quot; class=&quot;headerlink&quot; title=&quot;Vue 的深入理解&quot;&gt;&lt;/a&gt;Vue 的深入理解&lt;/h3&gt;&lt;h4 id=&quot;Vue的组件间传值&quot;&gt;&lt;a href=&quot;#Vue的组件间传值&quot; class=&quot;headerlink&quot; title=&quot;Vue的组件间传值&quot;&gt;&lt;/a&gt;Vue的组件间传值&lt;/h4&gt;&lt;p&gt;需要用到&lt;code&gt;props&lt;/code&gt;、&lt;code&gt;v-bind&lt;/code&gt;、&lt;code&gt;$emit&lt;/code&gt;等方法的配合。&lt;/p&gt;
&lt;h5 id=&quot;Vue的生命周期函数&quot;&gt;&lt;a href=&quot;#Vue的生命周期函数&quot; class=&quot;headerlink&quot; title=&quot;Vue的生命周期函数&quot;&gt;&lt;/a&gt;Vue的生命周期函数&lt;/h5&gt;&lt;p&gt;Vue在实例生成之前和生成之后总共有8个生命周期函数，他们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beforeCreate&lt;/code&gt;：在实例生成之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;created&lt;/code&gt;：实例生成之后&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeMount&lt;/code&gt;：实例渲染之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mounted&lt;/code&gt;：实例渲染之后&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeUpdata&lt;/code&gt;：实例数据修改之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updatad&lt;/code&gt;：实例数据修改之后&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeDestroy&lt;/code&gt;：实例销毁之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroyed&lt;/code&gt;：实例销毁之后&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
