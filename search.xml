<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Yan Ruyu_Vue学习笔记</title>
    <url>/2020/03/08/Yan%20Ruyu_Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/welcome-to-vue.png" alt=""></p>
<h3 id="Vue基本认知"><a href="#Vue基本认知" class="headerlink" title="Vue基本认知"></a>Vue基本认知</h3><p><strong>Vue是一个JavaScript框架，它的特点在于使用者不用再思考DOM的操作，一切都由Vue来承担，这就是Vue的MVVM模式，使用Vue框架你只需要操作数据而不是DOM。</strong></p>
<p>Vue的v-for: 是Vue中一个简单的for循环，目前学到的课程中它可以用来遍历数组。<br>Vue的v-on: 是Vue中用于绑定事件的指令，它的作用是绑定一个事件，它可以简写成@。<br>Vue的v-bind: 用于传递数据，它可以帮你在组件之中传递值。<br>Vue的v-model: 数据的双向绑定。</p>
<p>Vue的el: 是Vue实例的“管辖范围”，它用于确定Vue实例的生效区域。<br>Vue的data: 是Vue实例的数据区域，它一般用于放置Vue实例中的数据内容。<br>Vue的methods: 用于放置Vue实例的方法，任何Vue中的使用的函数方法都要在其中定义。</p>
<h3 id="Vue-的深入理解"><a href="#Vue-的深入理解" class="headerlink" title="Vue 的深入理解"></a>Vue 的深入理解</h3><h4 id="Vue的组件间传值"><a href="#Vue的组件间传值" class="headerlink" title="Vue的组件间传值"></a>Vue的组件间传值</h4><p>需要用到<code>props</code>、<code>v-bind</code>、<code>$emit</code>等方法的配合。</p>
<h5 id="Vue的生命周期函数"><a href="#Vue的生命周期函数" class="headerlink" title="Vue的生命周期函数"></a>Vue的生命周期函数</h5><p>Vue在实例生成之前和生成之后总共有8个生命周期函数，他们分别是：</p>
<ul>
<li><code>beforeCreate</code>：在实例生成之前</li>
<li><code>created</code>：实例生成之后</li>
<li><code>beforeMount</code>：实例渲染之前</li>
<li><code>mounted</code>：实例渲染之后</li>
<li><code>beforeUpdata</code>：实例数据修改之前</li>
<li><code>updatad</code>：实例数据修改之后</li>
<li><code>beforeDestroy</code>：实例销毁之前</li>
<li><code>destroyed</code>：实例销毁之后</li>
</ul>
<a id="more"></a>

<h4 id="Vue的模板语法"><a href="#Vue的模板语法" class="headerlink" title="Vue的模板语法"></a>Vue的模板语法</h4><p>Vue中的模板语法有插值表达式、<code>v-text</code>、<code>v-html</code>等等。</p>
<p>任何v-开头的Vue指令，后面接的都是JS的表达式，也就是说可以在后面接上加减乘除等JS语句，插值表达式也是如此。</p>
<h4 id="计算属性，方法和侦听器"><a href="#计算属性，方法和侦听器" class="headerlink" title="计算属性，方法和侦听器"></a>计算属性，方法和侦听器</h4><h5 id="计算属性-computed："><a href="#计算属性-computed：" class="headerlink" title="计算属性 computed："></a>计算属性 <code>computed</code>：</h5><p>直接通过属性名就能使用，因为原因和上面说的一样：</p>
<blockquote>
<p>任何v-开头的Vue指令，后面接的都是JS的表达式。也就是说可以在后面接上加减乘除等JS语句。</p>
</blockquote>
<p>缓存功能在计算的成员值不变的情况下将不会进行第二次计算，节省资源。</p>
<h5 id="方法methods："><a href="#方法methods：" class="headerlink" title="方法methods："></a>方法methods：</h5><p>也可以直接通过属性名使用（注意方法独有的括号），但是它没有计算属性的缓存功能，在计算成员值不变的情况下每次都会重新计算一次，在网页元素比较多的情况下可能会有比较明显的资源浪费。</p>
<h5 id="监听器watch："><a href="#监听器watch：" class="headerlink" title="监听器watch："></a>监听器watch：</h5><p>可以监听指定的方法，当监听的方法发生变化时会执行指定的操作，保留了计算属性的缓存功能。</p>
<p>当以上三种方法同是适用的候，优先推荐计算属性 <code>computed</code>，既简洁，也保留了性能。</p>
<h4 id="计算属性的getter和setter"><a href="#计算属性的getter和setter" class="headerlink" title="计算属性的getter和setter"></a>计算属性的getter和setter</h4><p>计算属性你可以使用 <code>Get</code>方法，通过其他值算出一个新值，也可以使用 <code>Set</code>方法，通过设置一个值改变相关联的值，从而使用计算属性的特性引起第二次计算。</p>
<h4 id="Vue中的样式绑定"><a href="#Vue中的样式绑定" class="headerlink" title="Vue中的样式绑定"></a>Vue中的样式绑定</h4><p>可以使用 <code>isActivated</code>来控制样式名字的显示和隐藏，在 <code>data</code> 或 <code>methods</code> 中设置 <code>isActivated</code> 为true就会绑定上CSS的样式。也可以使用数组来控制样式名字，设置数组的第一个值为空，标签就没有绑定CSS样式，设置数组第一个值为CSS样式名字则会绑定，还可以使用<code>V-bind:style=&quot;CSS样式名字&quot;</code>的方式来进行绑定，这样CSS样式名字就是一个Vue的 <code>data</code> 值，可以在Vue的<code>data</code> 中控制它的属性，以此类推，这种方法后面也能接一个数组，更多样化。</p>
<h4 id="Vue的条件渲染"><a href="#Vue的条件渲染" class="headerlink" title="Vue的条件渲染"></a>Vue的条件渲染</h4><h5 id="v-if、v-else-if、v-else："><a href="#v-if、v-else-if、v-else：" class="headerlink" title="v-if、v-else-if、v-else："></a>v-if、v-else-if、v-else：</h5><p><code>v-if</code>是一个Vue的指令，它的值决定了它所在的这个DIV标签是否渲染显示，每次的隐藏和显示都相当于删除和增加一个DOM元素，它还能搭配 <code>v-else</code> 或 <code>v-else-if</code>一起组合使用（警告，<code>v-if</code> 和 <code>v-else</code>、<code>v-else-if</code>必须紧靠在一起使用！）。<br>由于Vue的特性，Vue在渲染网页的时候会尽量复用页面上已有的DOM，这可能会产生一些问题，为了解决这些问题就有<code>key</code>值这个概念，<code>key</code>值是独一无二的，Vue并不会复用key值不一样的DOM元素。</p>
<h5 id="v-show："><a href="#v-show：" class="headerlink" title="v-show："></a>v-show：</h5><p><code>v-show</code> 与 <code>v-if</code>类似，但是它每次的隐藏和显示并非是在页面上删除和增加一个新的DOM，而是通过隐藏DOM标签，在相同的环境下，<code>v-show</code>所需要的性能相对要低于前者。</p>
<h4 id="Vue的列表循环"><a href="#Vue的列表循环" class="headerlink" title="Vue的列表循环"></a>Vue的列表循环</h4><h5 id="key、数组操作："><a href="#key、数组操作：" class="headerlink" title="key、数组操作："></a>key、数组操作：</h5><p>当使用<code>v-for</code>遍历来实现列表渲染编写<code>key</code>值时，考虑到性能和一些未知的问题，尽量不要使用数组的下标作为<code>key</code>值，而是使用数组中一些独一无二的值。</p>
<p>当你直接对Vue的数组操作其下标时，数据会发生变化，但是页面不会发生变化，你需要使用Vue提供的7个数组操作方法来对数组进行操作，它们分别是：</p>
<ul>
<li><code>push</code>：向数组的末尾添加一个元素</li>
<li><code>pop</code>：删除数组的最后一个元素</li>
<li><code>shift</code>：删除数组的第一个元素</li>
<li><code>unshift</code>：向数组的开头添加一个或多个元素</li>
<li><code>splice</code>： 向数组中删除或添加元素</li>
<li><code>sort</code>： 对数组进行排序</li>
<li><code>reverse</code> 对数组进行取反</li>
</ul>
<p>还有通过改变数组的引用来实现对数据的操作，即直接改变遍历的数组，这种方法也能在数据变化的同时页面同时变化</p>
<h5 id="遍历对象："><a href="#遍历对象：" class="headerlink" title="遍历对象："></a>遍历对象：</h5><p>列表渲染不但可以使用数组，也可以使用一个对象，使用的方式和数组相同，但是使用对象进行列表渲染时，网页并不会渲染对象的键名，而是直接显示对象的值，取而代替的是一个叫<code>key</code>的变量，其中对象的<code>index</code>和数组相同。</p>
<p>在使用对象进行列表渲染时，你无法使用Vue提供的7个数组操作方法，你可以直接修改对象里的数据，数组变的同时页面也会跟着发生变化，但是和数字相同：直接往对象里添加数据时，页面是不会发生变化，与之类似，你可以直接改变对象的引用来实现数据的变化页面跟着变。</p>
<h4 id="使用组件的细节点"><a href="#使用组件的细节点" class="headerlink" title="使用组件的细节点"></a>使用组件的细节点</h4><p>当你使用Vue的组件功能实现组件化时，你定义了一个组件，这个组件的名字可能与HTML自有的标准不符，使用这些组件的时候会产生一些问题，这时Vue提供了 <code>is=&quot;组件名&quot;</code> 的语法来解决这种问题，这种方法的作用就是在遵守HTML标准的同时使用你自定义的组件。<br>在组件中定义<code>data</code> 时，<code>data</code> 必须是一个函数而不是一个对象。</p>
<h5 id="ref："><a href="#ref：" class="headerlink" title="ref："></a>ref：</h5><p>当你在HTML标签中使用ref时，你获取到的是 <code>ref</code> 对应标签的DOM元素，而当你在组件中使用 <code>ref</code> 时，你获取到的是子组件的引用。</p>
<h4 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h4><h5 id="隐形的规定——单向数据流："><a href="#隐形的规定——单向数据流：" class="headerlink" title="隐形的规定——单向数据流："></a>隐形的规定——单向数据流：</h5><p>父组件可以随意的向子组件传值，子组件也可以修改父组件传递过来的值，但是这样可能会导致一些问题，所以在子组件中使用父组件传递来的值时，需要使用子组件自己的 <code>data</code> 来复制一份来自父组件的值。</p>
<h5 id="emit-："><a href="#emit-：" class="headerlink" title="emit()："></a>emit()：</h5><p>子组件向父组件传值需要用的 <code>$emit()</code> 这个方法，这个方法不但可以向外触发事件，还可以在触发事件的同时传递一个值（向外触发的事件名可能不允许大写）。</p>
<h4 id="组件参数校验与非props特性"><a href="#组件参数校验与非props特性" class="headerlink" title="组件参数校验与非props特性"></a>组件参数校验与非props特性</h4><h5 id="参数校验："><a href="#参数校验：" class="headerlink" title="参数校验："></a>参数校验：</h5><p>父组件可以任意向子组件传值，子组件对传递过来的值可以进行一个校验，也就是对传递的值有一定的约束，要使用这个特性，子组件里的props就不再是一个数组，而是一个对象，在对象中可以对传递过来的值进行一个约束，约束的条件还可以是一个数组，甚至是一个对象。<br>当 <code>props</code> 是一个对象时，你可以使用 <code>validator</code> 这一个函数还对传递值进行校验，还可以使用 <code>default</code> 来规定一个未传值时的默认值，required来规定父组件必须传值，当然还有 <code>type</code> 来约束传递的值类型。</p>
<h5 id="非props特性："><a href="#非props特性：" class="headerlink" title="非props特性："></a>非props特性：</h5><p>当父组件向子组件传值的时候，子组件需要声明 <code>props</code> 来获取来自父组件的值，这个时候父组件传递的值并不会显示在子组件DOM中，但是子组件如果并没有声明 <code>props</code> 来获取父组件的值，那么这个值会显示在子组件的DOM中，这就是 <code>非props</code> 特性。</p>
<h5 id="给组件绑定原生事件"><a href="#给组件绑定原生事件" class="headerlink" title="给组件绑定原生事件"></a>给组件绑定原生事件</h5><p>当你直接在子组件的中使用父组件的函数，这时候绑定的其实是组件的自定义事件，需要用 <code>$emit</code> 来向外触发和监听，你需要在子组件中的模板中绑定这个事件，这时候绑定和触发的才会是父组件的函数，如果你确实需要直接用子组件绑定父组件的事件，你可以在子组件的自定义事件后面添加 <code>.native</code>，这个时候绑定的也是父组件的函数。</p>
<h4 id="非父子组件间的传值"><a href="#非父子组件间的传值" class="headerlink" title="非父子组件间的传值"></a>非父子组件间的传值</h4><h5 id="bus："><a href="#bus：" class="headerlink" title="bus："></a>bus：</h5><p>在使用Vue进行组件化传值的时候，会遇到这样一个问题：非父子组件间传值。如果按照传统的方法将值一层一层传递上去，这样写出来的代码将会非常冗长，这是就有了 <code>bus</code>这个概念，在使用 <code>bus</code>前你需要事先给 <code>Vue.prototype.bus</code>赋值一个新的Vue实例： <code>Vue.prototype.bus = new Vue()</code>，这句话的意思在 <code>Vue.prototype</code>上挂载了一个名叫 <code>bus</code>的属性，它指向一个Vue的实例。每当你去创建一个Vue实例或者一个组件时，都会有bus这个属性。<br>有了 <code>bus</code>，非父子组件间传值就变的非常容易了，就像子组件向父组件传值那样，传值组件中用 <code>bus</code>向外触发一个事件：<code>this.bus.$emit(&quot;事件名&quot;,&quot;数据&quot;)</code>。然后在Vue的8个生命周期钩子之一：<code>mounted</code>（实例渲染之后）中写一个函数，这个函数 <code>bus</code>中的 <code>$on</code>函数监听 <code>bus</code>向外触发的事件名和数据，再传递给接收组件。这样就完成了非父子组件间传值的需要。（警告：在接受组件的 <code>mounted</code>函数中操作数据时，<code>this</code>的作用域可能会发生变化，需要用 <code>var this_ = this</code>来保存 <code>this</code>的数据。）</p>
<h4 id="在Vue中使用插槽"><a href="#在Vue中使用插槽" class="headerlink" title="在Vue中使用插槽"></a>在Vue中使用插槽</h4><h5 id="插槽："><a href="#插槽：" class="headerlink" title="插槽："></a>插槽：</h5><p>子组件内的某些元素需要由来自父组件或者其他组件的值来决定时，子组件自带的模板似乎就不是那么好用，这时Vue就提供了一个新的功能：插槽。插槽使用的方法很简单，只需要在子组件的模板中添加一行要插入的内容，之后在 <code>template</code>中相应的位置插入 <code>&lt;slot&gt;&lt;/slot&gt;</code>就可以了，在这个元素中还可以加入默认值以表示插槽未定义时的值。</p>
<h5 id="具名插槽v-slot："><a href="#具名插槽v-slot：" class="headerlink" title="具名插槽v-slot："></a>具名插槽v-slot：</h5><p>假如你需要由来自两个不同的组件的值来显示在不同的插槽位置时，单单<code>&lt;slot&gt;&lt;/slot&gt;</code>是不够的，为了解决这个问题，Vue有一个新的指令 <code>v-slot</code>，它用于给插槽指定一个名字，之后在 <code>template</code>使用<code>name=&quot;插槽名&quot;</code>就可以实现不同位置显示不同的插槽的需求。（注意：<code>v-slot</code>只能写在模板占位符即 <code>template</code>中）</p>
<h5 id="作用域插槽slot-sope："><a href="#作用域插槽slot-sope：" class="headerlink" title="作用域插槽slot_sope："></a>作用域插槽slot_sope：</h5><p>组件化的使用过程中还有可能遇到一种情况：当子组件的 DOM结构应该由外部传递进来的时候，这个时候就要使用作用域插槽来解决问题，子组件插槽可以向父组件插槽传数据，子组件用 <code>v-bind</code>传，父组件用 <code>slot-scope=&quot;属性名&quot;</code>接受数据。</p>
<h4 id="动态组件与v-once指令"><a href="#动态组件与v-once指令" class="headerlink" title="动态组件与v-once指令"></a>动态组件与v-once指令</h4><h5 id="动态组件："><a href="#动态组件：" class="headerlink" title="动态组件："></a>动态组件：</h5><p>在之前的笔记中可以看到：在一个 DOM元素中使用 <code>is=&quot;组件名&quot;</code>的方式可以在不影响语法要求的情况下将原来的DOM元素替换为定义的组件，这种特性与<code>&lt;component&gt;&lt;/component&gt;</code>结合就成了Vue的动态组件（也可以不是<code>&lt;component&gt;&lt;/component&gt;</code>），在 <code>data</code>中定义一个变量，变量的值是组件名，通过改变这个变量的名为其他组件名来实现动态组件。</p>
<h5 id="v-once："><a href="#v-once：" class="headerlink" title="v-once："></a>v-once：</h5><p>在上面的方法每当 <code>is=&quot;组件名&quot;</code>的值变化，在渲染显示一个组件的同时，Vue会将其他的未被渲染的组件隐藏销毁，也就是说用上面的方法每次动态组件切换时Vue就会渲染组件的同时和销毁隐藏的组件，如果频繁切换组件这种方法无疑会影响性能，<code>v-once</code>指令会将组件在隐藏时放入内存中，重新调用的时候再从内存中拿出来，通过 <code>v-once</code>指令，可以有效提高一些静态内容的展示效率。</p>
<h4 id="Vue中的CSS动画原理"><a href="#Vue中的CSS动画原理" class="headerlink" title="Vue中的CSS动画原理"></a>Vue中的CSS动画原理</h4><p>为Vue元素添加动画时，需要用<code>&lt;transition&gt;</code>标签包住元素，这样才能为Vue元素添加动画效果，当你不为<code>&lt;transition&gt;</code>标签指定一个<code>name</code>时，动画样式的前缀默认为<code>v-</code>，还可以在<code>&lt;transition&gt;</code>使用<code>-class</code>为<code>enter</code>和<code>leave</code>动画指定一个CSS样式名字，这样Vue就会使用你指定的样式名字。（这个时候就不在需要<code>name</code>）<br>Vue动画从开始到结束会有3个过程即从开始到结束和中间，进入过程：Vue会为这三个不同的过程中添加不同的CSS样式：<code>enter</code>、<code>enter-active</code>、<code>enter-to</code>。<br>与之相似，退出过程也会有三个CSS样式：<code>leave</code>、<code>leave-active</code>、<code>leave-to</code>。</p>
<h5 id="为什么使用enter作为动画的入场开始："><a href="#为什么使用enter作为动画的入场开始：" class="headerlink" title="为什么使用enter作为动画的入场开始："></a>为什么使用enter作为动画的入场开始：</h5><p>使用<code>enter</code>作为入场开始是因为动画在默认情况下<code>opacity</code>为1，这时需要在第一帧是将其写为0，在之后的进行中中过程中<code>enter</code>会被移除，这时<code>opacity</code>为0。</p>
<h5 id="为什么使用leave-to作为动画的出场开始："><a href="#为什么使用leave-to作为动画的出场开始：" class="headerlink" title="为什么使用leave-to作为动画的出场开始："></a>为什么使用leave-to作为动画的出场开始：</h5><p>使用<code>leave-to</code>作为出场开始是因为动画第一帧<code>opacity</code>需要为1，从第二帧开始<code>leave</code>被移除，这时<code>opacity</code>的值还是1，需要将其改为0，动画才会被正常触发。</p>
<h4 id="在Vue中使用animate-css库"><a href="#在Vue中使用animate-css库" class="headerlink" title="在Vue中使用animate.css库"></a>在Vue中使用animate.css库</h4><p>库的动画是CSS3标准的动画。由于Vue可以更改CSS样式的名字，所以我们可以使用在实现复杂的动画时可以使用使用一些CSS库如animate.css，用<code>-class</code>为动画指定名字为CSS库的样式名字，实现CSS库的绑定。</p>
<h4 id="在Vue中同时使用过渡和动画"><a href="#在Vue中同时使用过渡和动画" class="headerlink" title="在Vue中同时使用过渡和动画"></a>在Vue中同时使用过渡和动画</h4><h5 id="元素第一次显示的动画效果："><a href="#元素第一次显示的动画效果：" class="headerlink" title="元素第一次显示的动画效果："></a>元素第一次显示的动画效果：</h5><p>当需要元素第一次显示时也有动画效果，需要在<code>&lt;transition&gt;</code>标签中写入两个属性：<code>appear</code>、<code>appear-active-class</code>，第一个表示第一次显示元素时也有动画效果，第二个表示动画效果的CSS规则，它的值就是CSS动画规则名。</p>
<h5 id="同时使用CSS库和过渡动画"><a href="#同时使用CSS库和过渡动画" class="headerlink" title="同时使用CSS库和过渡动画:"></a>同时使用CSS库和过渡动画:</h5><p>要实现这种效果，需要为在<code>&lt;transition&gt;</code>标签中为元素绑定两个CSS规则，分别为CSS库动画和过渡动画——<code>enter</code>和<code>leave</code></p>
<h5 id="CSS库和过渡动画执行时间不一致"><a href="#CSS库和过渡动画执行时间不一致" class="headerlink" title="CSS库和过渡动画执行时间不一致:"></a>CSS库和过渡动画执行时间不一致:</h5><p>在使用CSS库的时候，而它往往都是固定的，而自定义的过渡效果可能和它不一样，这是可以在<code>&lt;transition&gt;</code>标签中写一个新的属性type，它的值决定了最终动画时长以谁为准（<code>animation</code> 或 <code>transition</code>）</p>
<blockquote>
<p><strong>来自官方的解释</strong>：Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。<br>但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 <code>animation</code> 很快的被触发并完成了，而 <code>transition</code> 效果还没结束。在这种情况中，你就需要使用 <code>type attribute</code> 并设置 <code>animation</code> 或 <code>transition</code> 来明确声明你需要 Vue 监听的类型。</p>
</blockquote>
<h5 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间:"></a>显性的过渡持续时间:</h5><p>在大多数情况下，Vue可以自动得出动画所需要的执行时长，当然也可以用<code>duration</code>属性定制执行时长（这个属性需要用v-bind绑定，并且以毫秒表示）。<code>duration</code>属性的值还可以是多个，用{}符号包裹，这个情况下可以分别为<code>enter</code>和<code>leave</code>动画定制执行时长。</p>
<h4 id="Vue中的JS动画"><a href="#Vue中的JS动画" class="headerlink" title="Vue中的JS动画"></a>Vue中的JS动画</h4><p>在Vue动画的开始和结束，有6个JS钩子，它们分别是：<br><code>before-enter</code>：入场动画之前<br><code>enter</code>：入场动画执行中<br><code>after-enter</code>：入场动画之后<br><code>before-leave</code>：出场动画之前<br><code>leave</code>：出场动画执行中<br><code>after-leave</code>：出场动画之后</p>
<h4 id="Vue中多个元素或组件的过渡"><a href="#Vue中多个元素或组件的过渡" class="headerlink" title="Vue中多个元素或组件的过渡"></a>Vue中多个元素或组件的过渡</h4><p>Vue在渲染网页的时候会尽量复用页面上已有的<code>DOM</code>，在使用Vue的动画效果时可能会产生一些问题，这时候也需要为元素指定<code>Key</code>值，保证动画的正常执行。<br><code>&lt;transition&gt;</code>标签中有一个属性叫：<code>mode</code>，它有两个值：<code>in-out</code>和<code>out-in</code>，<code>mode</code>的值为<code>in-out</code>时，动画会先显示再隐藏，而<code>out-in</code>则与之相反，不使用<code>mode</code>属性时，动画就会同时执行。多个组件的过渡动画可以使用动态组件来实现。</p>
<h4 id="Vue的列表过渡"><a href="#Vue的列表过渡" class="headerlink" title="Vue的列表过渡"></a>Vue的列表过渡</h4><p>与单个元素使用动画效果不同，列表渲染相当于渲染多个元素的，这是<code>&lt;transition&gt;</code>标签不支持的，这时候就需要使用<code>&lt;transition-group&gt;</code>标签，这个标签相当于为每一个渲染的元素添加上一个<code>&lt;transition&gt;</code>标签。</p>
<h4 id="Vue中的动画封装"><a href="#Vue中的动画封装" class="headerlink" title="Vue中的动画封装"></a>Vue中的动画封装</h4><p>在很多时候一个相同的动画会用上很多次，尽管他们的元素各不相同，这样一来，每为一个元素设定这个动画都需要重复编写<code>&lt;transition&gt;</code>，这是很不方便的，为了解决这个问题，我们可以使用Vue组件来对重复使用的动画进行封装。除此之外还可以将CSS规则进行封装，用Vue动画的6个JS钩子将它改写为JS动画写在组件的<code>methods</code>中。</p>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>或许我可以用Vue的模板功能来生成一个带有Vue实例接管的模板，例如：<br><code>template: &quot;&lt;li id=&quot;app&quot;&gt;Hello Wrold&lt;/li&gt;&quot;</code></p>
<p>在Vue框架的使用中，你可以使用一个叫<code>&lt;template&gt;</code>的新标签，这个标签并不会真的渲染到页面之上，但是它可以结合Vue指令来实现一些意想不到的效果，一个既不会真的渲染多一个标签但又确实存在的效果。</p>
<p>还有一个特别的方法能改变列表渲染时的值：Vue.set方法</p>
]]></content>
  </entry>
  <entry>
    <title>通过Vue源代码解析$on、$emit实现原理</title>
    <url>/2020/05/11/%E9%80%9A%E8%BF%87Vue%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90$on%E3%80%81$emit%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><img src="/images/Vue_on&emit.png" alt="More OOXX With Vue"></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>阅读Vue的源码对深入学习Vue框架是非常有必要的，只知道它表面的用法，而不知道它内部的原理那就说不上是真正熟悉掌握了这一门框架，常常出了问题一头雾水</strong></p>
<p><strong>Vue的$emit、$on和Node.js的EventEmitter的使用方法非常类似。</strong></p>
<h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><h4 id="on绑定事件"><a href="#on绑定事件" class="headerlink" title="$on绑定事件"></a>$on绑定事件</h4><blockquote>
<p>Vue中的$on是一种将函数与事件绑定的方法。</p>
</blockquote>
<p>通过Vue的源代码可以看到，$on调用时需要两个参数，第一个是字符串或数组类型作为事件的名称，第二个是触发事件执行的回调函数。$on第一步会对第一个参数做一个是否为数组的判断，这里可以看出$on允许为多个事件绑定同一个回调函数。</p>
<a id="more"></a>

<p>如果参数为数组，那么它会使用for遍历这个数组，并进行递归。<br>如果参数为字符串，那么它会在已有的事件(_events)中寻找是否已经存在相同的事件，如果没有会创建并初始化为空数组同时将传递的第二个参数也就是事件被触发时需要执行的回调函数添加进去。</p>
<p><img src="/images/$on%E6%96%B9%E6%B3%95.png" alt="$on方法"></p>
<blockquote>
<p>总结：$on方法允许为多个事件绑定同一个回调函数，还在里面使用了递归<del>自己日自己</del></p>
</blockquote>
<h4 id="emit-触发事件"><a href="#emit-触发事件" class="headerlink" title="$emit 触发事件"></a>$emit 触发事件</h4><blockquote>
<p>Vue中的$emit是一种触发事件的方法。</p>
</blockquote>
<p>它接受的第一个参数是一个字符串类型，这个字符串参数也就是需要触发的事件名称，第二个参数是触发事件时需要传递的数据。</p>
<p>第一步$emit会将传递的事件名称转换成小写，并进行一系列的检查判断是否符合语法标准，然后它会在事件列表(_events)中寻找事件对应的回调函数，也就是在$on中传递并添加的回调函数，这里如果没有找到会直接返回，找到了会先进行一次判断，判断回调函数是否大于1，如果大于就把它转换成一个数组。</p>
<p>这时候第一个参数事件名已经不再需要了，$emit会将其舍弃，并把剩下的数据转换成数组。传递给一个带有try&amp;catch的invokeWithErrorHandling()方法，并在其中使用apply()或call()来调用事件回调函数。</p>
<p><img src="/images/%E8%B0%83%E7%94%A8invokeWithErrorHandling%E6%96%B9%E6%B3%95.png" alt="调用invokeWithErrorHandling方法"></p>
<p><strong>invokeWithErrorHandling()方法源代码</strong></p>
<p><img src="/images/invokeWithErrorHandling%E6%96%B9%E6%B3%95.png" alt="invokeWithErrorHandling方法"></p>
<blockquote>
<p>总结：用$emit方法触发事件允许一个事件有多个回调函数，它们会变成数组被遍历，同时也允许携带参数，它使用了apply()或call()更改作用域来保证参数有效</p>
</blockquote>
<p><strong>(注意：看源代码可以发现如果回调函数中有返回(return)，invokeWithErrorHandling()方法是能拿到并会返回res，但是$emit中没有对这个返回的res进行赋值。)</strong></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>别看了，这里我实在不知道写什么好了</p>
]]></content>
  </entry>
  <entry>
    <title>零基础教你用WordPress搭建个人网站</title>
    <url>/2020/03/08/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E4%BD%A0%E7%94%A8WordPress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><img src="/images/welcome-to-wp.png" alt=""></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>网上关于使用WordPress搭建个人网站的教程有很多，我的水平也没有那些真正的dalao高，写这一篇主要是为了帮还不会建站的朋友们入门门槛低一些<br>顺带复习一下语文<br>你可以问我问题，但没准你知道的比我还多</p>
</blockquote>
<h2 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h2><p>###第一步，注册一个域名<br>国内比较出名的有万网，腾讯云。国外比较出名的有GoDaddy，选好合适的然后付钱就可以了( • ̀ω•́ )✧</p>
<h3 id="第二步，购买一台云服务器"><a href="#第二步，购买一台云服务器" class="headerlink" title="第二步，购买一台云服务器"></a>第二步，购买一台云服务器</h3><h5 id="这一步要注意，国内主机用于网站搭建需要备案"><a href="#这一步要注意，国内主机用于网站搭建需要备案" class="headerlink" title="这一步要注意，国内主机用于网站搭建需要备案"></a>这一步要注意，国内主机用于网站搭建需要备案</h5><p>国内可以选择阿里云，腾讯云之类的比较出名的服务商<br>国外的涉及部分原因不予说明，请自行百度(￣ ￣)／</p>
<p>腾讯云有学生优惠套餐，最低只需要10元一个月，但只有国内主机可选<br><img src="/images/Tenxunyun.png" alt=""></p>
<p>阿里云学生认证之后也有学生优惠套餐，9.5一个月，年费还送.xin域名，只有国内主机可选</p>
<a id="more"></a>

<h3 id="第三步，安装必要环境和WordPress"><a href="#第三步，安装必要环境和WordPress" class="headerlink" title="第三步，安装必要环境和WordPress"></a>第三步，安装必要环境和WordPress</h3><h6 id="以下步骤全部都在CentOS下完成-并在CentOS6-8下测试通过"><a href="#以下步骤全部都在CentOS下完成-并在CentOS6-8下测试通过" class="headerlink" title="* 以下步骤全部都在CentOS下完成,并在CentOS6.8下测试通过"></a>* 以下步骤全部都在CentOS下完成,并在CentOS6.8下测试通过</h6><h4 id="搭建LAMP环境"><a href="#搭建LAMP环境" class="headerlink" title="搭建LAMP环境"></a>搭建LAMP环境</h4><p>LAMP是Linux，Apache，MySQL，PHP的缩写，是WordPress博客系统的基础运行环境</p>
<h6 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br></pre></td></tr></table></figure>
<p><img src="/images/1.png" alt=""></p>
<h6 id="安装完后启动Apache服务"><a href="#安装完后启动Apache服务" class="headerlink" title="安装完后启动Apache服务"></a>安装完后启动Apache服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service httpd start</span><br></pre></td></tr></table></figure>
<h6 id="将Apache设置为开机自启动"><a href="#将Apache设置为开机自启动" class="headerlink" title="将Apache设置为开机自启动"></a>将Apache设置为开机自启动</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure>


<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mysql-server -y</span><br></pre></td></tr></table></figure>
<p><img src="/images/2.png" alt=""></p>
<h6 id="安装完成后启动MySQL服务"><a href="#安装完成后启动MySQL服务" class="headerlink" title="安装完成后启动MySQL服务"></a>安装完成后启动MySQL服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>
<h6 id="将MySQL设置为开机自启动"><a href="#将MySQL设置为开机自启动" class="headerlink" title="将MySQL设置为开机自启动"></a>将MySQL设置为开机自启动</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure>
<h6 id="设置-MySQL-账户-root-密码"><a href="#设置-MySQL-账户-root-密码" class="headerlink" title="设置 MySQL 账户 root 密码"></a>设置 MySQL 账户 root 密码</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password '输入密码'</span><br></pre></td></tr></table></figure>
<h6 id="进入MySQL"><a href="#进入MySQL" class="headerlink" title="进入MySQL"></a>进入MySQL</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot --password='你设置的密码'</span><br></pre></td></tr></table></figure>
<h6 id="为-WordPress-创建一个名为WordPress的数据库"><a href="#为-WordPress-创建一个名为WordPress的数据库" class="headerlink" title="为 WordPress 创建一个名为WordPress的数据库"></a>为 WordPress 创建一个名为WordPress的数据库</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE wordpress;</span><br></pre></td></tr></table></figure>
<h6 id="成功后退出"><a href="#成功后退出" class="headerlink" title="成功后退出"></a>成功后退出</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h4 id="安装PHP和PHPMySQL-分两行输入"><a href="#安装PHP和PHPMySQL-分两行输入" class="headerlink" title="安装PHP和PHPMySQL(分两行输入)"></a>安装PHP和PHPMySQL(分两行输入)</h4><p>*由于部分服务商的CentOS6可能自带php-mysql，所以可能会提示已经安装.不用理会就好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install php -y</span><br><span class="line">yum install php-mysql -y</span><br></pre></td></tr></table></figure>


<h6 id="在-var-www-html目录下新建一个hellowrold-php文件来检查Apache是否支持php，输入"><a href="#在-var-www-html目录下新建一个hellowrold-php文件来检查Apache是否支持php，输入" class="headerlink" title="在/var/www/html目录下新建一个hellowrold.php文件来检查Apache是否支持php，输入"></a>在/var/www/html目录下新建一个hellowrold.php文件来检查Apache是否支持php，输入</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="重启Apache服务"><a href="#重启Apache服务" class="headerlink" title="重启Apache服务"></a>重启Apache服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service httpd restart</span><br></pre></td></tr></table></figure>
<h6 id="浏览器输入"><a href="#浏览器输入" class="headerlink" title="浏览器输入"></a>浏览器输入</h6><p>http://外网IP/hellowrold.php</p>
<h6 id="应该就可以看到刚刚新建的PHP页面了"><a href="#应该就可以看到刚刚新建的PHP页面了" class="headerlink" title="应该就可以看到刚刚新建的PHP页面了"></a>应该就可以看到刚刚新建的PHP页面了</h6><p><img src="/images/4.png" alt=""></p>
<h4 id="安装WordPress博客系统"><a href="#安装WordPress博客系统" class="headerlink" title="安装WordPress博客系统"></a>安装WordPress博客系统</h4><h6 id="下载最新版WordPress中文版"><a href="#下载最新版WordPress中文版" class="headerlink" title="下载最新版WordPress中文版"></a>下载最新版WordPress中文版</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -c https://cn.wordpress.org/wordpress-4.9.1-zh_CN.tar.gz</span><br></pre></td></tr></table></figure>

<h6 id="解压WordPress"><a href="#解压WordPress" class="headerlink" title="解压WordPress"></a>解压WordPress</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xzvf wordpress-4.9.1-zh_CN.tar.gz</span><br></pre></td></tr></table></figure>

<h6 id="移动WordPress"><a href="#移动WordPress" class="headerlink" title="移动WordPress"></a>移动WordPress</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv wordpress /var/www/html/</span><br></pre></td></tr></table></figure>

<p>*如果在后面的五分钟配置环节提示需要手动写入wp-config.php文件，则输入以下指令更改权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -hR www-data /var/www/html/wordpress</span><br></pre></td></tr></table></figure>
<p>如果还是不行，需要手动修改wp-config-sample.php</p>
<h6 id="接着浏览器输入"><a href="#接着浏览器输入" class="headerlink" title="接着浏览器输入"></a>接着浏览器输入</h6><p>http://外网IP/wordpress</p>
<h6 id="应该就能看到WordPress五分钟配置页面了"><a href="#应该就能看到WordPress五分钟配置页面了" class="headerlink" title="应该就能看到WordPress五分钟配置页面了"></a>应该就能看到WordPress五分钟配置页面了</h6><p><img src="/images/5.png" alt=""></p>
<h3 id="第四步，绑定域名解析"><a href="#第四步，绑定域名解析" class="headerlink" title="第四步，绑定域名解析"></a>第四步，绑定域名解析</h3><p>域名解析这一步比较简单，基本上跟着步骤就可以啦<br>腾讯云域名解析示例<br><img src="/images/6.png" alt=""></p>
<h5 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h5><p>www 是指解析之后域名为www.域名这样的形式,例如<a href="http://www.Foryou092.com" target="_blank" rel="noopener">www.Foryou092.com</a><br>@ 是指解析之后域名直接显示为 域名这样的形式，例如Foryou.com<br>*是将所有的次级域名均指向同一IP地址</p>
<h5 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h5><p>A记录  用来指定域名的IPv4地址，如需要指向一个IP地址，则需要增加A记录<br>CNAME记录  如果将域名指向一个域名，实现与被指向域名相同的访问效果，则需要增加CNAME记录</p>
<h5 id="记录值"><a href="#记录值" class="headerlink" title="记录值"></a>记录值</h5><p>填你的服务器的IPv4地址</p>
<h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>因为DNS是有缓存的，所以TTL就是表示DNS记录在DNS服务器上的缓存时间<br>一般保持默认就好啦</p>
<p>*尝试Ping你的域名，看看域名指向是否正确，DNS解析需要时间，添加完域名时间后需要等待一段时间</p>
<h3 id="接下来就是花费时间把自己的网站建设的美观一点啦ヾ-。￣□￣-ツ"><a href="#接下来就是花费时间把自己的网站建设的美观一点啦ヾ-。￣□￣-ツ" class="headerlink" title="接下来就是花费时间把自己的网站建设的美观一点啦ヾ(。￣□￣)ツ"></a>接下来就是花费时间把自己的网站建设的美观一点啦ヾ(。￣□￣)ツ</h3><h3 id="一些WordPress主题推荐"><a href="#一些WordPress主题推荐" class="headerlink" title="一些WordPress主题推荐"></a>一些WordPress主题推荐</h3><p>我用的MD主题MDx：<a href="https://flyhigher.top/develop/788.html" target="_blank" rel="noopener">传送门</a></p>
<h6 id="最后，感谢Axton"><a href="#最后，感谢Axton" class="headerlink" title="最后，感谢Axton"></a>最后，感谢Axton</h6><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>*以上内容大部分来自互联网ㄟ(▔ ,▔)ㄏ<br>*不来自的那就是我乱说的ㄟ(▔ ,▔)ㄏ</p>
<p>青梅枯萎，竹马老去，从此我爱的人都像你<br>晚安</p>
]]></content>
  </entry>
  <entry>
    <title>纯JS实现下拉加载</title>
    <url>/2020/04/14/%E7%BA%AFJS%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p><img src="/images/LoadingImg.jpg" alt=""></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>最近在深入学习Vue框架，想试着模仿<a href="https://www.app-echo.com/" target="_blank" rel="noopener" title="echo回声">echo回声</a>的移动端网页写一个网页出来，参考了uncleLian大佬的<a href="https://github.com/uncleLian/vue2-echo" target="_blank" rel="noopener" title="uncleLian/vue2-echo">vue2-echo</a>的一些实现。在这之中遇到了一个问题：uncleLian大佬使用Mint UI组件库来实现页面的下拉加载更多功能，但是我的项目并没有使用Mint UI，所以自然这个功能我就没法直接使用，没有就没有吧，大不了自己动手写，于是就有了这么一篇文章。</p>
</blockquote>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>实现的思路很简单，就是判断 滚动高度 + 可视高度 是否大于文档高度</p>
<p>window.pageYOffset + window.innerHeight &gt;= document.documentElement.scrollHeight</p>
<p>如果判断结果为真，就向后端请求更多数据，再使用push方法添加新请求返回的数据</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>实现每次下拉都返回不同的数据，就要对内容进行分页，根据页数返回不同的数据，但是这个项目并没有后端，后端返回的数据用的是Mock.js模拟的，问题来了Mock.mock在拦截GET请求的时候是无法拦截到url后面带的参数，这样一来就没法在Mock.js对传入的参数进行判断,这时候有两种解决思路，一种是数据分6页就写6个Mock.mock分别拦截不同的页数，使用这种方法的代码会很冗余，还有一种是uncleLian大佬的实现方法：使用for循环让Mock.mock拦截不同的页数</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> Page = <span class="number">1</span>; Page &lt;= <span class="number">6</span>; Page++) &#123;</span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    <span class="string">'data'</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">  Mock.mock(<span class="string">`<span class="subst">$&#123;baseURL&#125;</span>/list?Page=<span class="subst">$&#123;Page&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这样一来就实现了Mock.js对GET请求参数的模拟，光是这样还不行，需要对mock模拟的数据进行拆分，根据页数的不同返回的内容也不同，这里用到了JS的slice方法对数据拆成了6份</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> Page = <span class="number">1</span>; Page &lt;= <span class="number">6</span>; Page++) &#123;</span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    <span class="string">'data'</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">  Mock.mock(<span class="string">`<span class="subst">$&#123;baseURL&#125;</span>/list?Page=<span class="subst">$&#123;Page&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    params.data = listJson.slice((Page - <span class="number">1</span>) * <span class="number">6</span>, Page * <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到了返回的分页数据，下一步就是要把数据给渲染出来，这里直接使用<code>push(params)</code>添加数据是不行的，因为params是一个数组，这里需要用到JS的展开运算(<code>...</code>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.MusicListJson.push(...params);</span><br></pre></td></tr></table></figure>

<p>这样就完成了请求数据的添加操作</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>解决了实际代码编写时可能遇到的一些难点，剩下的就是添加页数控制，事件触发之类的操作，这样无插件实现JS下拉加载的功能就完成了。</p>
<p><del>果然使用插件会更方便一些</del></p>
]]></content>
  </entry>
</search>
